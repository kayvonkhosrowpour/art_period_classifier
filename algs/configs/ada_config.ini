# Boolean values must be one of: true, false

[TYPE]
# name of the model to use
model = RandomForestClassifier

[DIR]
# csv containing data
data_csv = /Users/kayvon/code/divp/proj/data/results/full_basic_test.csv
# directory to store model
save_dir = /Users/kayvon/code/divp/proj/algs/models
# name of trained model
model_title = random_forest_classifier_run0

[TUNING]
# cross validation to use: GridSearchCV or empty if HYPERPARAMS should be used directly
cv = GridSearchCV
# if using GridSearchCV, provide path/to/file.py where file.py contains
# a list of dicts (called param_grid) to directly feed into the GridSearchCV.
# ignored if cv is not GridSearchCV
param_grid = 

[GRIDSEARCHCVPARAMS]
# scoring method
# see https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter
scoring = 
# number of processors to use: -1 for max, reduce if memory consumption explodes
n_jobs = 
# number of jobs to dispatch in parallel execution, reduce if memory consumption explodes
pre_dispatch = 
# number of folds for cross validation, 3 is default
cv = 3

[HYPERPARAMS]
# increasing the min_* parameters ---> increases regularization
# decreasing the max_* parameters ---> increases regularization

# int number of trees to include in the RFC
n_estimators = 100

# impurity measure: 'gini' by default, or 'entropy'
criterion = gini

# tree-specific maximum depth. The smaller the max_depth, the more constrained
max_depth = 

# int: the minimum number of samples a node must have before it can be split
min_samples_split = 2

# parameter that may smooth the model, minimum num of samples to be a leaf node
# int: minimum number of samples for a leaf node
# float: ceil(min_samples_leaf * n_samples) are the min number of samples for each node
min_samples_leaf = 1

# same as min_samples_leaf but expressed as a fraction of the total
# number of weighted instances)
min_weight_fraction_leaf = 0.

# The number of features to consider when looking for the best split, default auto
# may be: auto, sqrt, log2, None, or fraction amt, or integer # of total # features
max_features = auto

# default None, limits the number of tree nodes - decrease to regularize
max_leaf_nodes = 

# number of processors to use: -1 for max, reduce if memory consumption explodes
# overriden if GridSearchCV is used
n_jobs = 

# keep this as 1 to 3 for print statements to indicate progress, 0 otherwise
verbose = 1
